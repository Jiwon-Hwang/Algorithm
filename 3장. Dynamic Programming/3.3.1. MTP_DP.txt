// 문제 : 오른쪽과 아래 방향으로만 가서 구할 수 있는 source~sink 까지의 최대! 경로 길이 구하기
// 입력 : 가중치가 있는 그리드 (2차원 배열 U, L) ==> 각 가중치들 이미 이 아래방향배열 U와 오른쪽방향배열 L에 저장해둔 상태로 입력값으로 주기
// 출력 : 최대 path 길이(누적 최대값) (s[m,n] : sink에서 source까지 경로 중 최대길이)

// 핵심은, 이전까지의 최대값만 기록해놓겠다!!(계속해서 그전까지의 최대값(최적) 하나만 고려하면됨)

MANHATTANTOURIST {
    s[0,0] = 0;                         // 배열 S : 각 지점에서의 누적값들 기록할 배열

    for i = 1 to m 
        s[i, 0] = s[i-1, 0] + U[i,0]    // 열고정(0열), 그리드의 왼쪽세로한줄은 각 지점에서의 누적값 확정할 수 있음!
    for j = 1 to n
        s[0, j] = s[0, j-i] + L[0, j]   // 행고정(0행), 그리드의 위쪽가로한줄은 각 지점에서의 누적값 확정할 수 있음!
    
    for i = 1 to m                      // 이제 s의 나머지 지점들에서의 최대경로길이들 구하기!! (양쪽값 비교하면서)
        for j = 1 to n
            s[i, j] = max( s[i-1,j]+U[i,j], s[i,j-1]+L[i,j] )
}