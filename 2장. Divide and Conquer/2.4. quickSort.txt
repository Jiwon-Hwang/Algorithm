// 문제 : 오름차순으로, 원소가 n개인 배열을 정렬
// 입력 : 자연수 n, 배열 S(인덱스는 1~n)
// 출력 : 오름차순으로 정렬된 배열 S

void quicksort(index low, index high){
    index pivotpoint;

    if(low<high){
        partition(low, high, pivotpoint);       // 배열을 분할하는 부분(알고리즘) ==> 실제로는 pivotpoint를 주소로(포인터)구현하기 때문에 그대로 아래에 넘길 수 있음!
        quicksort(low, pivotpoint-1);
        quicksort(pivotpoint+1, high);
    }
}



< 책 코드 : #partition2 > 
// 문제 : 퀵소트에서 쓸 수 있도록 배열 S를 분할
// 입력 : 인덱스 low, high, 배열 S에서 low~high까지의 부분배열 (S는 전역적으로 접근 가능~)
// 출력 : pivotpoint (low부터 high까지 인덱스로 된 S의 부분배열의 기준점) ==> *** &pivotpoint 중요!! ***

void partition(index low, index high, index& pivotpoint){       // ***얘는 pivotpoint 위치의 주소값(&) 가져오기! ==> 실제값 control
    index i, j;
    keytype pivotitem;

    pivotitem = S[low];                         // pivotitem(피벗값)으로 배열 S의 맨처음값 선택
    j=low;
    for(i = low+1; i <= high; i++){
        if(S[i] < pivotitem){                   // i : 비교해나갈 값들...(각각 한번씩 모두 pivot과 비교할 값들)
            j++;                                // j바로 다음에 있는 값과 위치 바꿔주기....ㅠㅠㅠ
            exchange S[i] and S[j];
        }
        pivotpoint = j;                         // j : pivot보다 작은 값들 중에서(앞쪽에 놓여져 있는 값들) 가장 맨뒤에 있는 값의 위치!
        exchange S[low] and S[pivotpoint];      // 마지막에 pivot보다 작은 값들 중에서 맨뒤에 있는 위치인 j위치에 해당하는 값과 pivot위치인 low를 바꿔주면 pivot위치 확정! (pivotitem 값을 pivotpoint에 저장)
    }

}