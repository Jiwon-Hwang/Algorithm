// 문제 : n개의 원소를 오름차순으로 정렬
// 입력 : 자연수 n(원소개수), 배열 S
// 출력 : 오름차순으로 정렬된 배열 S

// ***cf. S는 알고리즘에서 전역적으로 접근할 수 있도록 구현한 배열!! (따라서 const keytype S)***

void mergesort(int n, keytype S[]){
    if(n>1){                                                // 배열안의 원소개수가 1개이면 반으로 쪼갤 수 없으므로 실행x
        const int h = n/2, m = n-h;
        keytype U[1~h], V[1~m];                             //h 는 n의 절반, m은 나머지 절반(n에서 h뺀 것)
        copy S[1] through S[h] --> U[1] through U[h];       // S의 앞부분 절반인 S[1~h]를 U[1~h]에 복사 ==> ***계속 새롭게 U 정의***
        copy S[h+1] through S[n] --> V[1] through V[m];     // S의 나머지 절반인 S[h+1~n]를 V[1~m]에 복사 ==> ***계속 새롭게 V 정의***
        mergesort(h, U);                                    // 1st. 초기배열 S의 왼쪽절반부터 계속 쪼개서 새로운 배열 U들에 넣기
        mergesort(m, V);                                    // 2nd. 초기배열 S의 오른쪽 남은 절반 똑같이 쪼개기
        merge(h, m, U, V, S);                               // 3rd. 마지막으로, 정렬된 배열 U,V 합쳐서 S에 마지막으로 복붙
         
    }
}



// 문제 : 정렬된 배열 두개를 정렬상태를 유지하면서 하나로 합병
// 입력 : 자연수 h,m, 정렬된 배열 U(h개의 원소),V(m개의 원소)
// 출력 : U와 V의 원소들 모두 포함해서 정렬된 배열 S(총 n개의 원소. h+m=n)


//**const 3개 중요!!*** 입력받은 U,V,S의 실제 그 위치의 값을 건드리겠다!!
// 따라서 merge후, S로 받은 U,V 각각 mergesort하고 돌아오면 업데이트 되어있는거임!!!!! ***중요***
void merge(int h, int m, const keytype U[], const keytype V[], const keytype S[]){ 
    index i,j,k;
    i=1, j=1, k=1;
    
    while(i<=h && j<=m){                    // 입력받은 두 배열 U,V의 모든 인덱스까지(h,m까지) 다 비교해서 정렬
        if(U[i] < V[j]){
            S[k] = U[i];
            i++;                            // U의 i번째 값이 더 작으면 그걸 S[k]에 넣고, i++ 해주기(U에서 오른쪽으로 이동)
        }
        else{
            S[k]=V[j];
            j++;                            // V의 j번째 값이 더 작으면 그걸 S[k]에 넣고, j++ 해주기(V에서 오른쪽으로 이동)
        }
        k++;                                // S[k]에 값 덮어씌웠으면, S도 오른쪽으로 이동(k++) ==> for. 다음 덮어씌울값을 위한 준비
    }
    // 위에서 while문을 빠져나왔다는건, 둘중하나 배열끝까지 다 탐색끝났다는것이므로,,,
    if(i > h)                               // U의 인덱스인 i가 U의원소전체개수보다 넘어갔다는거 ==> 따라서 V가 뒤에 남은거임.. 다 큰값들이라서!
        copy V[j~m] --> S[k~h+m];           // V의 남은 큰값들 S의 뒤에다가 붙여주기! (S[k]부터해서~~~)
    else   
        copy U[i~h] --> S[k~h+m];           // U의 남은 큰값들 S의 뒤에다가 붙여주기! (S[k]부터해서~~~)
}
